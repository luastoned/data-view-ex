{"version":3,"sources":["../src/DataViewEx.ts"],"names":["DataViewEx","_DataViewEx","buffer","byteOffset","byteLength","littleEndian","position","maxPos","delta","value","offset","maxLength","pos","bytes","end","val","isDefined","encoded","i","length","sliceLength","endPos","maxEnd","slice","source","sourceOffset","targetOffset","sourceSlice","targetSlice","target","subOffset","subLength"],"mappings":"gCAEO,IAAMA,CAAAA,CAAN,MAAMC,CAAAA,SAAyF,QAAuB,CAiB3H,WAAA,CAAYC,CAAAA,CAAsBC,CAAAA,CAAqBC,EAAqBC,CAAAA,CAAe,IAAA,CAAM,CAC/F,KAAA,CAAMH,CAAAA,CAAQC,CAAAA,CAAYC,CAAU,CAAA,CAVtC,KAAQ,OAAA,CAAU,CAAA,CAWhB,IAAA,CAAK,aAAA,CAAgBC,CAAAA,CACrB,IAAA,CAAK,QAAA,CAAW,IAAI,YACpB,IAAA,CAAK,QAAA,CAAW,IAAI,YACtB,CASO,aAAA,CAAcA,CAAAA,CAA6B,CAChD,KAAK,aAAA,CAAgBA,EACvB,CAKO,aAAA,EAAyB,CAC9B,OAAO,IAAA,CAAK,aACd,CASO,SAAA,EAAoB,CACzB,OAAO,IAAA,CAAK,OACd,CAKO,SAAA,CAAUC,CAAAA,CAAwB,CACvC,IAAMC,CAAAA,CAAS,IAAA,CAAK,UAAA,CACpB,IAAA,CAAK,OAAA,CAAU,IAAA,CAAK,GAAA,CAAI,EAAG,IAAA,CAAK,GAAA,CAAID,CAAAA,CAAUC,CAAM,CAAC,EACvD,CAKO,UAAA,CAAWC,EAAqB,CACrC,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,OAAA,CAAUA,CAAK,EACrC,CAKO,aAAoB,CACzB,IAAA,CAAK,OAAA,CAAU,EACjB,CAOO,OAAA,CAAQL,CAAAA,CAA4B,CACzC,OAAO,KAAA,CAAM,OAAA,CAAQA,CAAU,CACjC,CAEO,QAAA,CAASA,CAAAA,CAA4B,CAC1C,OAAO,KAAA,CAAM,QAAA,CAASA,CAAU,CAClC,CAEO,OAAA,CAAQA,CAAAA,CAAoBM,CAAAA,CAAqB,CACtD,KAAA,CAAM,OAAA,CAAQN,CAAAA,CAAYM,CAAK,EACjC,CAEO,QAAA,CAASN,CAAAA,CAAoBM,EAAqB,CACvD,KAAA,CAAM,QAAA,CAASN,CAAAA,CAAYM,CAAK,EAClC,CAGO,QAAA,CAASN,EAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC7E,OAAO,KAAA,CAAM,QAAA,CAASF,CAAAA,CAAYE,CAAY,CAChD,CAEO,SAAA,CAAUF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC9E,OAAO,KAAA,CAAM,SAAA,CAAUF,CAAAA,CAAYE,CAAY,CACjD,CAEO,QAAA,CAASF,EAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CAC1F,KAAA,CAAM,QAAA,CAASF,CAAAA,CAAYM,EAAOJ,CAAY,EAChD,CAEO,SAAA,CAAUF,CAAAA,CAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,cAAqB,CAC3F,KAAA,CAAM,SAAA,CAAUF,CAAAA,CAAYM,CAAAA,CAAOJ,CAAY,EACjD,CAGO,SAASF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC7E,OAAO,KAAA,CAAM,QAAA,CAASF,EAAYE,CAAY,CAChD,CAEO,SAAA,CAAUF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC9E,OAAO,KAAA,CAAM,SAAA,CAAUF,CAAAA,CAAYE,CAAY,CACjD,CAEO,QAAA,CAASF,EAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CAC1F,KAAA,CAAM,QAAA,CAASF,CAAAA,CAAYM,EAAOJ,CAAY,EAChD,CAEO,SAAA,CAAUF,CAAAA,CAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,cAAqB,CAC3F,KAAA,CAAM,SAAA,CAAUF,CAAAA,CAAYM,CAAAA,CAAOJ,CAAY,EACjD,CAGO,SAASF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC7E,OAAO,KAAA,CAAM,WAAA,CAAYF,EAAYE,CAAY,CACnD,CAEO,SAAA,CAAUF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC9E,OAAO,KAAA,CAAM,YAAA,CAAaF,CAAAA,CAAYE,CAAY,CACpD,CAEO,QAAA,CAASF,EAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CAC1F,KAAA,CAAM,WAAA,CAAYF,CAAAA,CAAYM,EAAOJ,CAAY,EACnD,CAEO,SAAA,CAAUF,CAAAA,CAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,cAAqB,CAC3F,KAAA,CAAM,YAAA,CAAaF,CAAAA,CAAYM,CAAAA,CAAOJ,CAAY,EACpD,CAGO,UAAA,CAAWF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC/E,OAAO,KAAA,CAAM,WAAWF,CAAAA,CAAYE,CAAY,CAClD,CAEO,UAAA,CAAWF,CAAAA,CAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,KAAK,aAAA,CAAqB,CAC5F,KAAA,CAAM,UAAA,CAAWF,CAAAA,CAAYM,CAAAA,CAAOJ,CAAY,EAClD,CAEO,UAAA,CAAWF,CAAAA,CAAoBE,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC/E,OAAO,KAAA,CAAM,WAAWF,CAAAA,CAAYE,CAAY,CAClD,CAEO,UAAA,CAAWF,CAAAA,CAAoBM,CAAAA,CAAeJ,CAAAA,CAAe,KAAK,aAAA,CAAqB,CAC5F,KAAA,CAAM,UAAA,CAAWF,CAAAA,CAAYM,CAAAA,CAAOJ,CAAY,EAClD,CAOO,QAAA,EAAmB,CACxB,IAAMI,CAAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,IAAA,CAAK,OAAO,EACxC,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTA,CACT,CAEO,SAAA,EAAoB,CACzB,IAAMA,EAAQ,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,OAAO,CAAA,CACzC,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTA,CACT,CAEO,SAAA,CAAUA,CAAAA,CAAqB,CACpC,KAAA,CAAM,OAAA,CAAQ,IAAA,CAAK,OAAA,CAASA,CAAK,CAAA,CACjC,IAAA,CAAK,OAAA,EAAW,EAClB,CAEO,UAAA,CAAWA,CAAAA,CAAqB,CACrC,MAAM,QAAA,CAAS,IAAA,CAAK,OAAA,CAASA,CAAK,CAAA,CAClC,IAAA,CAAK,OAAA,EAAW,EAClB,CAGO,SAAA,CAAUJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC1D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,SAAS,IAAA,CAAK,OAAA,CAASJ,CAAY,CAAA,CACvD,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,UAAA,CAAWJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC3D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,UAAU,IAAA,CAAK,OAAA,CAASJ,CAAY,CAAA,CACxD,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,UAAA,CAAWA,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CACxE,KAAA,CAAM,QAAA,CAAS,KAAK,OAAA,CAASI,CAAAA,CAAOJ,CAAY,CAAA,CAChD,IAAA,CAAK,OAAA,EAAW,EAClB,CAEO,YAAYI,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CACzE,KAAA,CAAM,SAAA,CAAU,IAAA,CAAK,QAASI,CAAAA,CAAOJ,CAAY,CAAA,CACjD,IAAA,CAAK,OAAA,EAAW,EAClB,CAGO,SAAA,CAAUA,EAAe,IAAA,CAAK,aAAA,CAAuB,CAC1D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,QAASJ,CAAY,CAAA,CACvD,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,UAAA,CAAWJ,EAAe,IAAA,CAAK,aAAA,CAAuB,CAC3D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,SAAA,CAAU,IAAA,CAAK,QAASJ,CAAY,CAAA,CACxD,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,UAAA,CAAWA,EAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CACxE,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,OAAA,CAASI,EAAOJ,CAAY,CAAA,CAChD,IAAA,CAAK,OAAA,EAAW,EAClB,CAEO,WAAA,CAAYI,CAAAA,CAAeJ,EAAe,IAAA,CAAK,aAAA,CAAqB,CACzE,KAAA,CAAM,SAAA,CAAU,IAAA,CAAK,OAAA,CAASI,CAAAA,CAAOJ,CAAY,CAAA,CACjD,IAAA,CAAK,OAAA,EAAW,EAClB,CAGO,SAAA,CAAUA,CAAAA,CAAe,IAAA,CAAK,cAAuB,CAC1D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,WAAA,CAAY,IAAA,CAAK,OAAA,CAASJ,CAAY,EAC1D,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,UAAA,CAAWJ,CAAAA,CAAe,IAAA,CAAK,cAAuB,CAC3D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,YAAA,CAAa,IAAA,CAAK,OAAA,CAASJ,CAAY,EAC3D,OAAA,IAAA,CAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,UAAA,CAAWA,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CACxE,KAAA,CAAM,WAAA,CAAY,IAAA,CAAK,OAAA,CAASI,CAAAA,CAAOJ,CAAY,CAAA,CACnD,IAAA,CAAK,OAAA,EAAW,EAClB,CAEO,WAAA,CAAYI,CAAAA,CAAeJ,CAAAA,CAAe,KAAK,aAAA,CAAqB,CACzE,KAAA,CAAM,YAAA,CAAa,IAAA,CAAK,OAAA,CAASI,CAAAA,CAAOJ,CAAY,EACpD,IAAA,CAAK,OAAA,EAAW,EAClB,CAGO,WAAA,CAAYA,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC5D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,UAAA,CAAW,IAAA,CAAK,OAAA,CAASJ,CAAY,CAAA,CACzD,YAAK,OAAA,EAAW,CAAA,CACTI,CACT,CAEO,YAAA,CAAaA,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,cAAqB,CAC1E,KAAA,CAAM,UAAA,CAAW,IAAA,CAAK,OAAA,CAASI,CAAAA,CAAOJ,CAAY,CAAA,CAClD,KAAK,OAAA,EAAW,EAClB,CAEO,WAAA,CAAYA,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAuB,CAC5D,IAAMI,CAAAA,CAAQ,KAAA,CAAM,UAAA,CAAW,IAAA,CAAK,OAAA,CAASJ,CAAY,CAAA,CACzD,OAAA,IAAA,CAAK,SAAW,CAAA,CACTI,CACT,CAEO,YAAA,CAAaA,CAAAA,CAAeJ,CAAAA,CAAe,IAAA,CAAK,aAAA,CAAqB,CAC1E,KAAA,CAAM,UAAA,CAAW,IAAA,CAAK,OAAA,CAASI,CAAAA,CAAOJ,CAAY,CAAA,CAClD,IAAA,CAAK,SAAW,EAClB,CAUO,UAAA,CAAWK,CAAAA,CAAgBC,CAAAA,CAA4B,CAC5D,IAAIC,CAAAA,CAAMF,EACJG,CAAAA,CAAkB,EAAC,CACnBC,CAAAA,CAAM,IAAA,CAAK,UAAA,CAAa,IAAA,CAAK,UAAA,CAEnC,KAAOF,CAAAA,CAAME,CAAAA,EAAK,CAChB,IAAMC,CAAAA,CAAM,KAAA,CAAM,QAAA,CAASH,CAAAA,EAAK,EAMhC,GALIG,CAAAA,GAAQ,CAAA,GAIZF,CAAAA,CAAM,IAAA,CAAKE,CAAG,CAAA,CACVC,SAAAA,CAAUL,CAAS,CAAA,EAAKE,CAAAA,CAAM,MAAA,EAAUF,CAAAA,CAAAA,CAC1C,KAEJ,CAEA,OAAO,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,IAAI,UAAA,CAAWE,CAAK,CAAC,CACnD,CAMO,WAAWH,CAAAA,CAAgBD,CAAAA,CAAqB,CACrD,IAAIG,CAAAA,CAAMF,CAAAA,CACJO,CAAAA,CAAU,IAAA,CAAK,SAAS,MAAA,CAAOR,CAAK,CAAA,CAC1C,IAAA,IAASS,CAAAA,CAAI,CAAA,CAAGA,CAAAA,CAAID,CAAAA,CAAQ,OAAQC,CAAAA,EAAAA,CAClC,KAAA,CAAM,QAAA,CAASN,CAAAA,EAAAA,CAAOK,CAAAA,CAAQC,CAAC,CAAC,CAAA,CAIlC,MAAM,QAAA,CAASN,CAAAA,CAAK,CAAC,EACvB,CAOO,cAAA,CAAeF,CAAAA,CAAgBS,CAAAA,CAAwB,CAC5D,GAAIA,CAAAA,EAAU,CAAA,CACZ,OAAO,EAAA,CAGT,IAAIC,CAAAA,CAAcD,CAAAA,CACZE,EAASX,CAAAA,CAASS,CAAAA,CAClBG,CAAAA,CAAS,IAAA,CAAK,UAAA,CAAa,IAAA,CAAK,UAAA,CAOtC,GAJID,EAASC,CAAAA,GACXF,CAAAA,CAAcE,CAAAA,CAASZ,CAAAA,CAAAA,CAGrBU,CAAAA,EAAe,CAAA,CACjB,OAAO,EAAA,CAGT,IAAMG,CAAAA,CAAQ,IAAI,UAAA,CAAW,IAAA,CAAK,MAAA,CAAQ,IAAA,CAAK,UAAA,CAAab,CAAAA,CAAQU,CAAW,CAAA,CAC/E,OAAO,IAAA,CAAK,QAAA,CAAS,MAAA,CAAOG,CAAK,CACnC,CAOO,eAAeb,CAAAA,CAAgBD,CAAAA,CAAeU,CAAAA,CAAsB,CACzE,GAAIA,CAAAA,EAAU,CAAA,CACZ,OAGF,IAAMF,CAAAA,CAAU,IAAA,CAAK,QAAA,CAAS,MAAA,CAAOR,CAAK,CAAA,CACtCG,CAAAA,CAAMF,CAAAA,CAENQ,EAAI,CAAA,CACR,KAAOA,CAAAA,CAAIC,CAAAA,EAAUD,CAAAA,CAAID,CAAAA,CAAQ,MAAA,CAAQC,CAAAA,EAAAA,CACvC,MAAM,QAAA,CAASN,CAAAA,EAAAA,CAAOK,CAAAA,CAAQC,CAAC,CAAC,CAAA,CAGlC,KAAOA,CAAAA,CAAIC,EAAQD,CAAAA,EAAAA,CACjB,KAAA,CAAM,QAAA,CAASN,CAAAA,EAAAA,CAAO,CAAC,EAE3B,CAUO,WAAA,CAAYD,EAA4B,CAC7C,IAAME,CAAAA,CAAkB,EAAC,CACrBH,CAAAA,CAAS,IAAA,CAAK,OAAA,CAElB,KAAOA,CAAAA,CAAS,IAAA,CAAK,UAAA,CAAa,IAAA,CAAK,UAAA,EAAY,CACjD,IAAMD,EAAQ,KAAA,CAAM,QAAA,CAASC,CAAM,CAAA,CAQnC,GAPAA,CAAAA,EAAAA,CAEID,CAAAA,GAAU,CAAA,GAIdI,EAAM,IAAA,CAAKJ,CAAK,CAAA,CACZO,SAAAA,CAAUL,CAAS,CAAA,EAAKE,CAAAA,CAAM,MAAA,EAAUF,GAC1C,KAEJ,CAGA,OAAA,IAAA,CAAK,OAAA,CAAUD,CAAAA,CAER,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,IAAI,UAAA,CAAWG,CAAK,CAAC,CACnD,CAMO,YAAA,CAAaJ,CAAAA,CAAqB,CACvC,IAAMQ,CAAAA,CAAU,IAAA,CAAK,QAAA,CAAS,MAAA,CAAOR,CAAK,CAAA,CAC1C,IAAA,IAASS,CAAAA,CAAI,EAAGA,CAAAA,CAAID,CAAAA,CAAQ,MAAA,CAAQC,CAAAA,EAAAA,CAClC,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,OAAA,EAAA,CAAWD,EAAQC,CAAC,CAAC,CAAA,CAI3C,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,OAAA,EAAA,CAAW,CAAC,EAClC,CAOO,eAAA,CAAgBC,CAAAA,CAAwB,CAC7C,GAAIA,CAAAA,EAAU,CAAA,CACZ,OAAO,GAIT,IAAIC,CAAAA,CAAcD,CAAAA,CACH,IAAA,CAAK,OAAA,CAAUA,CAAAA,CACjB,IAAA,CAAK,UAAA,CAAa,KAAK,UAAA,GAClCC,CAAAA,CAAc,IAAA,CAAK,UAAA,CAAa,IAAA,CAAK,UAAA,CAAa,IAAA,CAAK,OAAA,CAAA,CAGzD,IAAMG,CAAAA,CAAQ,IAAI,UAAA,CAAW,IAAA,CAAK,MAAA,CAAQ,IAAA,CAAK,UAAA,CAAa,IAAA,CAAK,QAASH,CAAW,CAAA,CACrF,OAAA,IAAA,CAAK,OAAA,EAAWA,CAAAA,CAET,IAAA,CAAK,QAAA,CAAS,MAAA,CAAOG,CAAK,CACnC,CAOO,gBAAA,CAAiBd,CAAAA,CAAeU,CAAAA,CAAsB,CAC3D,GAAIA,CAAAA,EAAU,EACZ,OAGF,IAAMF,CAAAA,CAAU,IAAA,CAAK,QAAA,CAAS,MAAA,CAAOR,CAAK,CAAA,CACtC,EAAI,CAAA,CAER,KAAO,CAAA,CAAIU,CAAAA,EAAU,CAAA,CAAIF,CAAAA,CAAQ,MAAA,CAAQ,CAAA,EAAA,CACvC,MAAM,QAAA,CAAS,IAAA,CAAK,OAAA,EAAA,CAAWA,CAAAA,CAAQ,CAAC,CAAC,CAAA,CAI3C,KAAO,EAAIE,CAAAA,CAAQ,CAAA,EAAA,CACjB,KAAA,CAAM,QAAA,CAAS,IAAA,CAAK,OAAA,EAAA,CAAW,CAAC,EAEpC,CASA,IAAW,SAAA,EAA0B,CACnC,OAAO,IAAA,CAAK,MACd,CAKA,IAAW,YAAyB,CAClC,OAAO,IAAI,UAAA,CAAW,IAAA,CAAK,MAAA,CAAQ,IAAA,CAAK,UAAA,CAAY,KAAK,UAAU,CACrE,CAMO,QAAA,CAASK,CAAAA,CAAkCC,CAAAA,CAAsBC,CAAAA,CAAsBP,CAAAA,CAAsB,CAClH,IAAMQ,CAAAA,CAAc,IAAI,UAAA,CAAWH,CAAAA,CAAO,MAAA,CAAQA,CAAAA,CAAO,UAAA,CAAaC,EAAcN,CAAM,CAAA,CACpFS,CAAAA,CAAc,IAAI,UAAA,CAAW,IAAA,CAAK,MAAA,CAAQ,IAAA,CAAK,WAAaF,CAAAA,CAAcP,CAAM,CAAA,CAEtF,IAAA,IAASD,CAAAA,CAAI,CAAA,CAAGA,CAAAA,CAAIC,CAAAA,CAAQD,IAC1BU,CAAAA,CAAYV,CAAC,CAAA,CAAIS,CAAAA,CAAYT,CAAC,EAElC,CAMO,MAAA,CAAOW,EAAkCH,CAAAA,CAAsBD,CAAAA,CAAsBN,CAAAA,CAAsB,CAChH,IAAMQ,CAAAA,CAAc,IAAI,UAAA,CAAW,KAAK,MAAA,CAAQ,IAAA,CAAK,UAAA,CAAaF,CAAAA,CAAcN,CAAM,CAAA,CAChFS,CAAAA,CAAc,IAAI,WAAWC,CAAAA,CAAO,MAAA,CAAQA,CAAAA,CAAO,UAAA,CAAaH,CAAAA,CAAcP,CAAM,CAAA,CAE1F,IAAA,IAASD,EAAI,CAAA,CAAGA,CAAAA,CAAIC,CAAAA,CAAQD,CAAAA,EAAAA,CAC1BU,CAAAA,CAAYV,CAAC,CAAA,CAAIS,CAAAA,CAAYT,CAAC,EAElC,CAOO,KAAA,CAAMY,CAAAA,CAAmBC,CAAAA,CAA6C,CAC3E,OAAO,IAAI9B,EAAW,IAAA,CAAK,MAAA,CAAQ,IAAA,CAAK,UAAA,CAAa6B,CAAAA,CAAWC,CAAAA,CAAW,IAAA,CAAK,aAAa,CAC/F,CAGF","file":"index.mjs","sourcesContent":["import { isDefined } from 'std-kit'; // example import from std-kit if needed\n\nexport class DataViewEx<TArrayBuffer extends ArrayBufferLike & { BYTES_PER_ELEMENT?: never }> extends DataView<TArrayBuffer> {\n  // #region Fields & Constructor\n\n  private _littleEndian: boolean;\n  private readonly _decoder: TextDecoder;\n  private readonly _encoder: TextEncoder;\n\n  // Internal cursor to mimic a stream-like interface\n  private _cursor = 0;\n\n  /**\n   * Constructs a new DataViewEx.\n   * @param buffer       The underlying ArrayBuffer (or ArrayBuffer-like).\n   * @param byteOffset   Offset in bytes to the first byte in `buffer`.\n   * @param byteLength   The length of the view in bytes.\n   * @param littleEndian Default endianness for multi-byte ops (defaults to true).\n   */\n  constructor(buffer: TArrayBuffer, byteOffset?: number, byteLength?: number, littleEndian = true) {\n    super(buffer, byteOffset, byteLength);\n    this._littleEndian = littleEndian;\n    this._decoder = new TextDecoder(); // Defaults to 'utf-8'\n    this._encoder = new TextEncoder(); // Defaults to 'utf-8'\n  }\n\n  // #endregion\n\n  // #region Endianness\n\n  /**\n   * Sets the default endianness for multi-byte operations.\n   */\n  public setEndianness(littleEndian: boolean): void {\n    this._littleEndian = littleEndian;\n  }\n\n  /**\n   * Retrieves the current default endianness.\n   */\n  public getEndianness(): boolean {\n    return this._littleEndian;\n  }\n\n  // #endregion\n\n  // #region Cursor / Position Management\n\n  /**\n   * Returns the current cursor position.\n   */\n  public getCursor(): number {\n    return this._cursor;\n  }\n\n  /**\n   * Sets the cursor to an absolute position (clamped to [0, this.byteLength]).\n   */\n  public setCursor(position: number): void {\n    const maxPos = this.byteLength;\n    this._cursor = Math.max(0, Math.min(position, maxPos));\n  }\n\n  /**\n   * Moves the cursor by the specified delta (can be negative).\n   */\n  public moveCursor(delta: number): void {\n    this.setCursor(this._cursor + delta);\n  }\n\n  /**\n   * Resets the cursor to 0.\n   */\n  public resetCursor(): void {\n    this._cursor = 0;\n  }\n\n  // #endregion\n\n  // #region Offset-based Getters/Setters\n\n  // 8-bit\n  public getInt8(byteOffset: number): number {\n    return super.getInt8(byteOffset);\n  }\n\n  public getUInt8(byteOffset: number): number {\n    return super.getUint8(byteOffset);\n  }\n\n  public setInt8(byteOffset: number, value: number): void {\n    super.setInt8(byteOffset, value);\n  }\n\n  public setUInt8(byteOffset: number, value: number): void {\n    super.setUint8(byteOffset, value);\n  }\n\n  // 16-bit\n  public getInt16(byteOffset: number, littleEndian = this._littleEndian): number {\n    return super.getInt16(byteOffset, littleEndian);\n  }\n\n  public getUInt16(byteOffset: number, littleEndian = this._littleEndian): number {\n    return super.getUint16(byteOffset, littleEndian);\n  }\n\n  public setInt16(byteOffset: number, value: number, littleEndian = this._littleEndian): void {\n    super.setInt16(byteOffset, value, littleEndian);\n  }\n\n  public setUInt16(byteOffset: number, value: number, littleEndian = this._littleEndian): void {\n    super.setUint16(byteOffset, value, littleEndian);\n  }\n\n  // 32-bit\n  public getInt32(byteOffset: number, littleEndian = this._littleEndian): number {\n    return super.getInt32(byteOffset, littleEndian);\n  }\n\n  public getUInt32(byteOffset: number, littleEndian = this._littleEndian): number {\n    return super.getUint32(byteOffset, littleEndian);\n  }\n\n  public setInt32(byteOffset: number, value: number, littleEndian = this._littleEndian): void {\n    super.setInt32(byteOffset, value, littleEndian);\n  }\n\n  public setUInt32(byteOffset: number, value: number, littleEndian = this._littleEndian): void {\n    super.setUint32(byteOffset, value, littleEndian);\n  }\n\n  // 64-bit BigInt\n  public getInt64(byteOffset: number, littleEndian = this._littleEndian): bigint {\n    return super.getBigInt64(byteOffset, littleEndian);\n  }\n\n  public getUInt64(byteOffset: number, littleEndian = this._littleEndian): bigint {\n    return super.getBigUint64(byteOffset, littleEndian);\n  }\n\n  public setInt64(byteOffset: number, value: bigint, littleEndian = this._littleEndian): void {\n    super.setBigInt64(byteOffset, value, littleEndian);\n  }\n\n  public setUInt64(byteOffset: number, value: bigint, littleEndian = this._littleEndian): void {\n    super.setBigUint64(byteOffset, value, littleEndian);\n  }\n\n  // float32 / float64\n  public getFloat32(byteOffset: number, littleEndian = this._littleEndian): number {\n    return super.getFloat32(byteOffset, littleEndian);\n  }\n\n  public setFloat32(byteOffset: number, value: number, littleEndian = this._littleEndian): void {\n    super.setFloat32(byteOffset, value, littleEndian);\n  }\n\n  public getFloat64(byteOffset: number, littleEndian = this._littleEndian): number {\n    return super.getFloat64(byteOffset, littleEndian);\n  }\n\n  public setFloat64(byteOffset: number, value: number, littleEndian = this._littleEndian): void {\n    super.setFloat64(byteOffset, value, littleEndian);\n  }\n\n  // #endregion\n\n  // #region Cursor-based Getters/Setters\n\n  // 8-bit\n  public readInt8(): number {\n    const value = super.getInt8(this._cursor);\n    this._cursor += 1;\n    return value;\n  }\n\n  public readUInt8(): number {\n    const value = super.getUint8(this._cursor);\n    this._cursor += 1;\n    return value;\n  }\n\n  public writeInt8(value: number): void {\n    super.setInt8(this._cursor, value);\n    this._cursor += 1;\n  }\n\n  public writeUInt8(value: number): void {\n    super.setUint8(this._cursor, value);\n    this._cursor += 1;\n  }\n\n  // 16-bit\n  public readInt16(littleEndian = this._littleEndian): number {\n    const value = super.getInt16(this._cursor, littleEndian);\n    this._cursor += 2;\n    return value;\n  }\n\n  public readUInt16(littleEndian = this._littleEndian): number {\n    const value = super.getUint16(this._cursor, littleEndian);\n    this._cursor += 2;\n    return value;\n  }\n\n  public writeInt16(value: number, littleEndian = this._littleEndian): void {\n    super.setInt16(this._cursor, value, littleEndian);\n    this._cursor += 2;\n  }\n\n  public writeUInt16(value: number, littleEndian = this._littleEndian): void {\n    super.setUint16(this._cursor, value, littleEndian);\n    this._cursor += 2;\n  }\n\n  // 32-bit\n  public readInt32(littleEndian = this._littleEndian): number {\n    const value = super.getInt32(this._cursor, littleEndian);\n    this._cursor += 4;\n    return value;\n  }\n\n  public readUInt32(littleEndian = this._littleEndian): number {\n    const value = super.getUint32(this._cursor, littleEndian);\n    this._cursor += 4;\n    return value;\n  }\n\n  public writeInt32(value: number, littleEndian = this._littleEndian): void {\n    super.setInt32(this._cursor, value, littleEndian);\n    this._cursor += 4;\n  }\n\n  public writeUInt32(value: number, littleEndian = this._littleEndian): void {\n    super.setUint32(this._cursor, value, littleEndian);\n    this._cursor += 4;\n  }\n\n  // 64-bit BigInt\n  public readInt64(littleEndian = this._littleEndian): bigint {\n    const value = super.getBigInt64(this._cursor, littleEndian);\n    this._cursor += 8;\n    return value;\n  }\n\n  public readUInt64(littleEndian = this._littleEndian): bigint {\n    const value = super.getBigUint64(this._cursor, littleEndian);\n    this._cursor += 8;\n    return value;\n  }\n\n  public writeInt64(value: bigint, littleEndian = this._littleEndian): void {\n    super.setBigInt64(this._cursor, value, littleEndian);\n    this._cursor += 8;\n  }\n\n  public writeUInt64(value: bigint, littleEndian = this._littleEndian): void {\n    super.setBigUint64(this._cursor, value, littleEndian);\n    this._cursor += 8;\n  }\n\n  // float32 / float64\n  public readFloat32(littleEndian = this._littleEndian): number {\n    const value = super.getFloat32(this._cursor, littleEndian);\n    this._cursor += 4;\n    return value;\n  }\n\n  public writeFloat32(value: number, littleEndian = this._littleEndian): void {\n    super.setFloat32(this._cursor, value, littleEndian);\n    this._cursor += 4;\n  }\n\n  public readFloat64(littleEndian = this._littleEndian): number {\n    const value = super.getFloat64(this._cursor, littleEndian);\n    this._cursor += 8;\n    return value;\n  }\n\n  public writeFloat64(value: number, littleEndian = this._littleEndian): void {\n    super.setFloat64(this._cursor, value, littleEndian);\n    this._cursor += 8;\n  }\n\n  // #endregion\n\n  // #region String Helpers (Offset-based)\n\n  /**\n   * Reads a null-terminated UTF-8 string at the absolute offset.\n   * Stops on `\\0` or end-of-buffer. Does NOT affect cursor.\n   */\n  public getStringZ(offset: number, maxLength?: number): string {\n    let pos = offset;\n    const bytes: number[] = [];\n    const end = this.byteOffset + this.byteLength;\n\n    while (pos < end) {\n      const val = super.getUint8(pos++);\n      if (val === 0) {\n        break; // found null terminator\n      }\n\n      bytes.push(val);\n      if (isDefined(maxLength) && bytes.length >= maxLength) {\n        break;\n      }\n    }\n\n    return this._decoder.decode(new Uint8Array(bytes));\n  }\n\n  /**\n   * Writes a UTF-8 string plus `\\0` at the absolute offset.\n   * Does NOT affect cursor.\n   */\n  public setStringZ(offset: number, value: string): void {\n    let pos = offset;\n    const encoded = this._encoder.encode(value);\n    for (let i = 0; i < encoded.length; i++) {\n      super.setUint8(pos++, encoded[i]);\n    }\n\n    // null terminator\n    super.setUint8(pos, 0);\n  }\n\n  /**\n   * Reads a fixed-length UTF-8 string from the absolute offset,\n   * ignoring null terminators, always reading `length` bytes (clamped if needed).\n   * Does NOT affect cursor.\n   */\n  public getFixedString(offset: number, length: number): string {\n    if (length <= 0) {\n      return '';\n    }\n\n    let sliceLength = length;\n    const endPos = offset + length;\n    const maxEnd = this.byteOffset + this.byteLength;\n\n    // clamp if beyond buffer\n    if (endPos > maxEnd) {\n      sliceLength = maxEnd - offset;\n    }\n\n    if (sliceLength <= 0) {\n      return '';\n    }\n\n    const slice = new Uint8Array(this.buffer, this.byteOffset + offset, sliceLength);\n    return this._decoder.decode(slice);\n  }\n\n  /**\n   * Writes a fixed-length UTF-8 string at the absolute offset.\n   * If shorter than `length`, extra bytes are zeroed.\n   * If longer, it is truncated. Does NOT affect cursor.\n   */\n  public setFixedString(offset: number, value: string, length: number): void {\n    if (length <= 0) {\n      return;\n    }\n\n    const encoded = this._encoder.encode(value);\n    let pos = offset;\n\n    let i = 0;\n    for (; i < length && i < encoded.length; i++) {\n      super.setUint8(pos++, encoded[i]);\n    }\n\n    for (; i < length; i++) {\n      super.setUint8(pos++, 0);\n    }\n  }\n\n  // #endregion\n\n  // #region String Helpers (Cursor-based)\n\n  /**\n   * Reads a null-terminated UTF-8 string from the current cursor.\n   * Stops on `\\0` or the end of buffer. Advances `_cursor` by however many bytes were read.\n   */\n  public readStringZ(maxLength?: number): string {\n    const bytes: number[] = [];\n    let offset = this._cursor;\n\n    while (offset < this.byteOffset + this.byteLength) {\n      const value = super.getUint8(offset);\n      offset++;\n\n      if (value === 0) {\n        break; // Found null terminator\n      }\n\n      bytes.push(value);\n      if (isDefined(maxLength) && bytes.length >= maxLength) {\n        break;\n      }\n    }\n\n    // Advance cursor by how many bytes we consumed\n    this._cursor = offset;\n\n    return this._decoder.decode(new Uint8Array(bytes));\n  }\n\n  /**\n   * Writes a UTF-8 string plus a null terminator at the current cursor,\n   * advancing the cursor by the total written.\n   */\n  public writeStringZ(value: string): void {\n    const encoded = this._encoder.encode(value);\n    for (let i = 0; i < encoded.length; i++) {\n      super.setUint8(this._cursor++, encoded[i]);\n    }\n\n    // Null terminator\n    super.setUint8(this._cursor++, 0);\n  }\n\n  /**\n   * Reads a fixed-length UTF-8 string from the current cursor,\n   * not stopping at null. Exactly `length` bytes are read.\n   * Advances `_cursor` by `length` (clamped if necessary).\n   */\n  public readFixedString(length: number): string {\n    if (length <= 0) {\n      return '';\n    }\n\n    // If length extends beyond the buffer, clamp it\n    let sliceLength = length;\n    const endPos = this._cursor + length;\n    if (endPos > this.byteOffset + this.byteLength) {\n      sliceLength = this.byteOffset + this.byteLength - this._cursor;\n    }\n\n    const slice = new Uint8Array(this.buffer, this.byteOffset + this._cursor, sliceLength);\n    this._cursor += sliceLength;\n\n    return this._decoder.decode(slice);\n  }\n\n  /**\n   * Writes a fixed-length UTF-8 string from the current cursor.\n   * If `value` is shorter than `length`, extra bytes are zeroed.\n   * If longer, it is truncated. Advances `_cursor` by `length`.\n   */\n  public writeFixedString(value: string, length: number): void {\n    if (length <= 0) {\n      return;\n    }\n\n    const encoded = this._encoder.encode(value);\n    let i = 0;\n\n    for (; i < length && i < encoded.length; i++) {\n      super.setUint8(this._cursor++, encoded[i]);\n    }\n\n    // Fill any remainder with zeros\n    for (; i < length; i++) {\n      super.setUint8(this._cursor++, 0);\n    }\n  }\n\n  // #endregion\n\n  // #region Buffer Helpers\n\n  /**\n   * Convenience getter for the underlying ArrayBuffer reference.\n   */\n  public get bufferRef(): TArrayBuffer {\n    return this.buffer;\n  }\n\n  /**\n   * Convenience getter for the underlying ArrayBufferView.\n   */\n  public get bufferView(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);\n  }\n\n  /**\n   * Copies `length` bytes from another DataViewEx to this DataViewEx\n   * using absolute offsets. Does not affect either cursor.\n   */\n  public copyFrom(source: DataViewEx<TArrayBuffer>, sourceOffset: number, targetOffset: number, length: number): void {\n    const sourceSlice = new Uint8Array(source.buffer, source.byteOffset + sourceOffset, length);\n    const targetSlice = new Uint8Array(this.buffer, this.byteOffset + targetOffset, length);\n\n    for (let i = 0; i < length; i++) {\n      targetSlice[i] = sourceSlice[i];\n    }\n  }\n\n  /**\n   * Copies `length` bytes from this DataViewEx to another DataViewEx\n   * using absolute offsets. Does not affect either cursor.\n   */\n  public copyTo(target: DataViewEx<TArrayBuffer>, targetOffset: number, sourceOffset: number, length: number): void {\n    const sourceSlice = new Uint8Array(this.buffer, this.byteOffset + sourceOffset, length);\n    const targetSlice = new Uint8Array(target.buffer, target.byteOffset + targetOffset, length);\n\n    for (let i = 0; i < length; i++) {\n      targetSlice[i] = sourceSlice[i];\n    }\n  }\n\n  /**\n   * Creates a new DataViewEx referencing a sub-range of this DataView's buffer.\n   * The returned view shares the same underlying ArrayBuffer.\n   * Does not affect `_cursor`.\n   */\n  public slice(subOffset: number, subLength: number): DataViewEx<TArrayBuffer> {\n    return new DataViewEx(this.buffer, this.byteOffset + subOffset, subLength, this._littleEndian);\n  }\n\n  // #endregion\n}\n"]}