import {isDefined}from'std-kit';var c=class b extends DataView{constructor(t,e,r,i=true){super(t,e,r);this._cursor=0;this._littleEndian=i,this._decoder=new TextDecoder,this._encoder=new TextEncoder;}setEndianness(t){this._littleEndian=t;}getEndianness(){return this._littleEndian}getCursor(){return this._cursor}setCursor(t){let e=this.byteLength;this._cursor=Math.max(0,Math.min(t,e));}moveCursor(t){this.setCursor(this._cursor+t);}resetCursor(){this._cursor=0;}getInt8(t){return super.getInt8(t)}getUInt8(t){return super.getUint8(t)}setInt8(t,e){super.setInt8(t,e);}setUInt8(t,e){super.setUint8(t,e);}getInt16(t,e=this._littleEndian){return super.getInt16(t,e)}getUInt16(t,e=this._littleEndian){return super.getUint16(t,e)}setInt16(t,e,r=this._littleEndian){super.setInt16(t,e,r);}setUInt16(t,e,r=this._littleEndian){super.setUint16(t,e,r);}getInt32(t,e=this._littleEndian){return super.getInt32(t,e)}getUInt32(t,e=this._littleEndian){return super.getUint32(t,e)}setInt32(t,e,r=this._littleEndian){super.setInt32(t,e,r);}setUInt32(t,e,r=this._littleEndian){super.setUint32(t,e,r);}getInt64(t,e=this._littleEndian){return super.getBigInt64(t,e)}getUInt64(t,e=this._littleEndian){return super.getBigUint64(t,e)}setInt64(t,e,r=this._littleEndian){super.setBigInt64(t,e,r);}setUInt64(t,e,r=this._littleEndian){super.setBigUint64(t,e,r);}getFloat32(t,e=this._littleEndian){return super.getFloat32(t,e)}setFloat32(t,e,r=this._littleEndian){super.setFloat32(t,e,r);}getFloat64(t,e=this._littleEndian){return super.getFloat64(t,e)}setFloat64(t,e,r=this._littleEndian){super.setFloat64(t,e,r);}readInt8(){let t=super.getInt8(this._cursor);return this._cursor+=1,t}readUInt8(){let t=super.getUint8(this._cursor);return this._cursor+=1,t}writeInt8(t){super.setInt8(this._cursor,t),this._cursor+=1;}writeUInt8(t){super.setUint8(this._cursor,t),this._cursor+=1;}readInt16(t=this._littleEndian){let e=super.getInt16(this._cursor,t);return this._cursor+=2,e}readUInt16(t=this._littleEndian){let e=super.getUint16(this._cursor,t);return this._cursor+=2,e}writeInt16(t,e=this._littleEndian){super.setInt16(this._cursor,t,e),this._cursor+=2;}writeUInt16(t,e=this._littleEndian){super.setUint16(this._cursor,t,e),this._cursor+=2;}readInt32(t=this._littleEndian){let e=super.getInt32(this._cursor,t);return this._cursor+=4,e}readUInt32(t=this._littleEndian){let e=super.getUint32(this._cursor,t);return this._cursor+=4,e}writeInt32(t,e=this._littleEndian){super.setInt32(this._cursor,t,e),this._cursor+=4;}writeUInt32(t,e=this._littleEndian){super.setUint32(this._cursor,t,e),this._cursor+=4;}readInt64(t=this._littleEndian){let e=super.getBigInt64(this._cursor,t);return this._cursor+=8,e}readUInt64(t=this._littleEndian){let e=super.getBigUint64(this._cursor,t);return this._cursor+=8,e}writeInt64(t,e=this._littleEndian){super.setBigInt64(this._cursor,t,e),this._cursor+=8;}writeUInt64(t,e=this._littleEndian){super.setBigUint64(this._cursor,t,e),this._cursor+=8;}readFloat32(t=this._littleEndian){let e=super.getFloat32(this._cursor,t);return this._cursor+=4,e}writeFloat32(t,e=this._littleEndian){super.setFloat32(this._cursor,t,e),this._cursor+=4;}readFloat64(t=this._littleEndian){let e=super.getFloat64(this._cursor,t);return this._cursor+=8,e}writeFloat64(t,e=this._littleEndian){super.setFloat64(this._cursor,t,e),this._cursor+=8;}getStringZ(t,e){let r=t,i=[],n=this.byteOffset+this.byteLength;for(;r<n;){let s=super.getUint8(r++);if(s===0||(i.push(s),isDefined(e)&&i.length>=e))break}return this._decoder.decode(new Uint8Array(i))}setStringZ(t,e){let r=t,i=this._encoder.encode(e);for(let n=0;n<i.length;n++)super.setUint8(r++,i[n]);super.setUint8(r,0);}getFixedString(t,e){if(e<=0)return "";let r=e,i=t+e,n=this.byteOffset+this.byteLength;if(i>n&&(r=n-t),r<=0)return "";let s=new Uint8Array(this.buffer,this.byteOffset+t,r);return this._decoder.decode(s)}setFixedString(t,e,r){if(r<=0)return;let i=this._encoder.encode(e),n=t,s=0;for(;s<r&&s<i.length;s++)super.setUint8(n++,i[s]);for(;s<r;s++)super.setUint8(n++,0);}readStringZ(t){let e=[],r=this._cursor;for(;r<this.byteOffset+this.byteLength;){let i=super.getUint8(r);if(r++,i===0||(e.push(i),isDefined(t)&&e.length>=t))break}return this._cursor=r,this._decoder.decode(new Uint8Array(e))}writeStringZ(t){let e=this._encoder.encode(t);for(let r=0;r<e.length;r++)super.setUint8(this._cursor++,e[r]);super.setUint8(this._cursor++,0);}readFixedString(t){if(t<=0)return "";let e=t;this._cursor+t>this.byteOffset+this.byteLength&&(e=this.byteOffset+this.byteLength-this._cursor);let i=new Uint8Array(this.buffer,this.byteOffset+this._cursor,e);return this._cursor+=e,this._decoder.decode(i)}writeFixedString(t,e){if(e<=0)return;let r=this._encoder.encode(t),i=0;for(;i<e&&i<r.length;i++)super.setUint8(this._cursor++,r[i]);for(;i<e;i++)super.setUint8(this._cursor++,0);}get bufferRef(){return this.buffer}get bufferView(){return new Uint8Array(this.buffer,this.byteOffset,this.byteLength)}copyFrom(t,e,r,i){let n=new Uint8Array(t.buffer,t.byteOffset+e,i),s=new Uint8Array(this.buffer,this.byteOffset+r,i);for(let u=0;u<i;u++)s[u]=n[u];}copyTo(t,e,r,i){let n=new Uint8Array(this.buffer,this.byteOffset+r,i),s=new Uint8Array(t.buffer,t.byteOffset+e,i);for(let u=0;u<i;u++)s[u]=n[u];}slice(t,e){return new b(this.buffer,this.byteOffset+t,e,this._littleEndian)}};export{c as DataViewEx};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map